import express from "express";
import nodemailer from "nodemailer";
import Cart from "../models/cart.js";
import Booking from "../models/booking.js";
import GlobalSettings from "../models/globalSettings.js";
import { authenticateToken, requireRole } from "../middleware/auth.js";
import { rateLimitConfig } from "../middleware/security.js";
import { EmailActionService } from "../services/emailActionService.js";
import { EmailService } from "../services/emailService.js";

const router = express.Router();

// ‚úÖ Fonction utilitaire pour formater les dates de fa√ßon coh√©rente
// Elle pr√©serve la date logique stock√©e en UTC comme date de s√©jour
function formatDateUTC(dateString) {
  // Si la date est d√©j√† au format ISO, on l'utilise directement
  if (typeof dateString === 'string' && dateString.includes('T')) {
    // Pour une date ISO comme "2025-09-22T00:00:00.000Z", on veut afficher 22/09/2025
    const dateParts = dateString.split('T')[0].split('-'); // ["2025", "09", "22"]
    return `${dateParts[2]}/${dateParts[1]}/${dateParts[0]}`; // "22/09/2025"
  }

  // Fallback pour les autres formats
  const date = new Date(dateString);
  const day = String(date.getUTCDate()).padStart(2, '0');
  const month = String(date.getUTCMonth() + 1).padStart(2, '0');
  const year = date.getUTCFullYear();
  return `${day}/${month}/${year}`;
}

// -------------------------
// 1. CR√âER DEMANDE DE R√âSERVATION
// -------------------------
router.post("/create-request", authenticateToken, async (req, res) => {
  try {
    console.log("üéØ [BOOKING] D√©but de la demande de r√©servation");
    console.log("üìã [BOOKING] User ID:", req.user.userId);
    console.log("üìã [BOOKING] Body re√ßu:", JSON.stringify(req.body, null, 2));

    // ‚úÖ CORRECTION - Utiliser les items envoy√©s par le frontend
    const { items: cartItems, guestDetails } = req.body;

    // Validation des donn√©es re√ßues
    if (!cartItems || cartItems.length === 0) {
      console.log("‚ùå [BOOKING] Erreur: Panier vide");
      return res.status(400).json({ result: false, error: "Aucun article dans la demande de r√©servation" });
    }

    console.log(`‚úÖ [BOOKING] ${cartItems.length} articles trouv√©s dans le panier`);

    // ‚úÖ CORRECTION - V√©rifier les conflits avant de cr√©er la r√©servation
    console.log("üîç [BOOKING] V√©rification des conflits de dates...");
    for (const item of cartItems) {
      console.log(`üîç [BOOKING] V√©rification ${item.apartmentId} du ${item.startDate} au ${item.endDate}`);

      const conflictingBookings = await Booking.find({
        apartmentId: item.apartmentId,
        status: { $in: ["pending", "accepted", "confirmed"] },
        $or: [
          { startDate: { $lte: item.endDate }, endDate: { $gte: item.startDate } }
        ]
      });

      console.log(`üîç [BOOKING] Conflits trouv√©s pour ${item.apartmentId}:`, conflictingBookings.length);

      if (conflictingBookings.length > 0) {
        console.log("‚ùå [BOOKING] Conflit d√©tect√©:", conflictingBookings);
        return res.status(400).json({
          result: false,
          error: `Dates non disponibles pour ${item.apartmentId}. Une r√©servation existe d√©j√† sur cette p√©riode.`
        });
      }
    }
    console.log("‚úÖ [BOOKING] Aucun conflit de dates d√©tect√©");

    // ‚úÖ CORRECTION - Les d√©tails invit√©s sont d√©j√† d√©finis dans la destructuration
    // Validation des d√©tails invit√©s avec valeurs par d√©faut
    const validatedGuestDetails = {
      adults: guestDetails?.adults || 1,
      children: guestDetails?.children || [],
      pets: guestDetails?.pets || [],
      specialRequests: guestDetails?.specialRequests || "",
      arrivalTime: guestDetails?.arrivalTime || "",
      contactPhone: guestDetails?.contactPhone || "",
      includeCleaning: guestDetails?.includeCleaning || false,
      includeLinen: guestDetails?.includeLinen || false
    };

    // R√©cup√©rer les param√®tres globaux pour les services
    let cleaningFee = 0;
    let linenFee = 0;

    try {
      const cleaningSetting = await GlobalSettings.findOne({ settingKey: "cleaning_fee" });
      const linenSetting = await GlobalSettings.findOne({ settingKey: "linen_option_price" });

      cleaningFee = cleaningSetting ? cleaningSetting.settingValue : 0;
      linenFee = linenSetting ? linenSetting.settingValue : 25; // Prix par d√©faut 25‚Ç¨
    } catch (settingsError) {
      console.error("Erreur r√©cup√©ration param√®tres globaux:", settingsError);
      // Continuer avec des frais √† 0
    }

    console.log("üíæ [BOOKING] Pr√©paration de l'insertion en base...");
    console.log("üíæ [BOOKING] D√©tails invit√©s valid√©s:", validatedGuestDetails);

    const bookingDocuments = cartItems.map((item) => {
      // Calculer les services additionnels
      const includeCleaning = validatedGuestDetails.includeCleaning;
      const includeLinen = validatedGuestDetails.includeLinen;

      const cleaningCost = includeCleaning ? cleaningFee : 0;
      const linenCost = includeLinen ? linenFee : 0;
      const totalPrice = item.price + cleaningCost + linenCost;

      const bookingDoc = {
        userId: req.user.userId,
        apartmentId: item.apartmentId,
        startDate: item.startDate,
        endDate: item.endDate,
        price: item.price, // Prix de base du logement
        totalPrice: totalPrice, // Prix total avec services
        status: "pending", // En attente validation h√¥te
        bookedAt: new Date(),
        guestDetails: {
          adults: validatedGuestDetails.adults,
          children: validatedGuestDetails.children,
          pets: validatedGuestDetails.pets,
          specialRequests: validatedGuestDetails.specialRequests,
          arrivalTime: validatedGuestDetails.arrivalTime,
          contactPhone: validatedGuestDetails.contactPhone
        },
        additionalServices: {
          cleaning: {
            included: includeCleaning,
            price: cleaningCost
          },
          linen: {
            included: includeLinen,
            price: linenCost
          }
        }
      };

      console.log(`üíæ [BOOKING] Document pr√©par√© pour ${item.apartmentId}:`, bookingDoc);
      return bookingDoc;
    });

    console.log(`üíæ [BOOKING] Insertion de ${bookingDocuments.length} r√©servations...`);
    const bookings = await Booking.insertMany(bookingDocuments);
    console.log(`‚úÖ [BOOKING] ${bookings.length} r√©servations ins√©r√©es avec succ√®s!`);

    // Envoyer un email √† l'h√¥te avec le nouveau syst√®me de templates
    console.log("üìß [BOOKING] Envoi de l'email √† l'h√¥te...");
    try {
      await EmailService.sendReservationEmail(bookings);
      console.log("‚úÖ [BOOKING] Email envoy√© avec succ√®s");
    } catch (emailError) {
      console.error("‚ö†Ô∏è [BOOKING] Erreur envoi email (non bloquant):", emailError);
      // Ne pas bloquer la r√©servation si l'email √©choue
    }

    // ‚úÖ CORRECTION - Optionnel: Vider le panier c√¥t√© serveur si il existe
    // (Le frontend se charge d√©j√† de vider le panier c√¥t√© client)
    try {
      const cartDeleteResult = await Cart.deleteOne({ userId: req.user.userId });
      console.log("üóëÔ∏è [BOOKING] Suppression panier serveur:", cartDeleteResult);
    } catch (cartError) {
      console.log("‚ÑπÔ∏è [BOOKING] Info: Aucun panier c√¥t√© serveur √† supprimer");
    }

    console.log("üéâ [BOOKING] R√©servation termin√©e avec succ√®s!");
    console.log("üéâ [BOOKING] IDs des r√©servations cr√©√©es:", bookings.map(b => b._id));

    res.json({
      result: true,
      message: "Demande envoy√©e √† l'h√¥te",
      bookings: bookings.map(b => ({
        _id: b._id,
        apartmentId: b.apartmentId,
        startDate: b.startDate,
        endDate: b.endDate,
        price: b.price,
        totalPrice: b.totalPrice,
        status: b.status
      })),
    });
  } catch (err) {
    console.error("‚ùå [BOOKING] ERREUR CRITIQUE create-request:", err);
    console.error("‚ùå [BOOKING] Stack trace:", err.stack);
    res.status(500).json({ result: false, error: "Erreur serveur lors de la cr√©ation de la r√©servation" });
  }
});

// -------------------------
// 2. ADMIN ACCEPTE UNE DEMANDE - S√âCURIS√â
// -------------------------
router.post(
  "/accept/:id", 
  rateLimitConfig.auth, // Protection rate limiting
  authenticateToken,    // V√©rification JWT
  requireRole(["admin"]), // Seuls les admins
  async (req, res) => {
    try {
      // Validation de l'ID MongoDB
      if (!req.params.id.match(/^[0-9a-fA-F]{24}$/)) {
        return res.status(400).json({ 
          result: false, 
          error: "ID de r√©servation invalide" 
        });
      }

      const booking = await Booking.findById(req.params.id);
      if (!booking) {
        return res.status(404).json({ 
          result: false, 
          error: "R√©servation introuvable" 
        });
      }

      // V√©rifier que le statut peut √™tre modifi√©
      if (booking.status !== "pending") {
        return res.status(400).json({ 
          result: false, 
          error: "Cette r√©servation ne peut plus √™tre modifi√©e" 
        });
      }

      booking.status = "accepted";
      await booking.save();

      // Log s√©curis√© pour audit
      console.log(`Admin ${req.user.userId} a accept√© la r√©servation ${req.params.id}`);

      res.json({ 
        result: true, 
        message: "R√©servation accept√©e avec succ√®s",
        bookingId: booking._id 
      });
    } catch (err) {
      console.error("Erreur accept:", err);
      res.status(500).json({ result: false, error: "Erreur serveur" });
    }
  }
);

// -------------------------
// 3. ADMIN REFUSE UNE DEMANDE - S√âCURIS√â
// -------------------------
router.post(
  "/refuse/:id", 
  rateLimitConfig.auth, // Protection rate limiting
  authenticateToken,    // V√©rification JWT
  requireRole(["admin"]), // Seuls les admins
  async (req, res) => {
    try {
      // Validation de l'ID MongoDB
      if (!req.params.id.match(/^[0-9a-fA-F]{24}$/)) {
        return res.status(400).json({ 
          result: false, 
          error: "ID de r√©servation invalide" 
        });
      }

      const booking = await Booking.findById(req.params.id);
      if (!booking) {
        return res.status(404).json({ 
          result: false, 
          error: "R√©servation introuvable" 
        });
      }

      // V√©rifier que le statut peut √™tre modifi√©
      if (booking.status !== "pending") {
        return res.status(400).json({ 
          result: false, 
          error: "Cette r√©servation ne peut plus √™tre modifi√©e" 
        });
      }

      booking.status = "refused";
      await booking.save();

      // Log s√©curis√© pour audit
      console.log(`Admin ${req.user.userId} a refus√© la r√©servation ${req.params.id}`);

      res.json({ 
        result: true, 
        message: "R√©servation refus√©e avec succ√®s",
        bookingId: booking._id 
      });
    } catch (err) {
      console.error("Erreur refuse:", err);
      res.status(500).json({ result: false, error: "Erreur serveur" });
    }
  }
);

// -------------------------
// 4. R√âCUP√âRER MES R√âSERVATIONS - AVEC PAGINATION
// -------------------------
router.get("/searchBookings", authenticateToken, async (req, res) => {
  try {
    // Param√®tres de pagination
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;

    // Validation des param√®tres
    if (page < 1 || limit < 1 || limit > 100) {
      return res.status(400).json({ 
        result: false, 
        error: "Param√®tres de pagination invalides (page >= 1, limit 1-100)" 
      });
    }

    // Requ√™te avec pagination
    const [bookings, totalCount] = await Promise.all([
      Booking.find({ userId: req.user.userId })
        .sort({ bookedAt: -1 })
        .skip(skip)
        .limit(limit)
        .lean(), // Performance: objet JS simple
      Booking.countDocuments({ userId: req.user.userId })
    ]);

    // M√©tadonn√©es de pagination
    const totalPages = Math.ceil(totalCount / limit);
    const hasNextPage = page < totalPages;
    const hasPrevPage = page > 1;

    res.json({ 
      result: true, 
      bookings,
      pagination: {
        currentPage: page,
        totalPages,
        totalItems: totalCount,
        itemsPerPage: limit,
        hasNextPage,
        hasPrevPage,
        nextPage: hasNextPage ? page + 1 : null,
        prevPage: hasPrevPage ? page - 1 : null
      }
    });
  } catch (err) {
    console.error("Erreur searchBookings:", err);
    res.status(500).json({ result: false, error: "Erreur serveur" });
  }
});

// -------------------------
// 5. ADMIN - LISTER TOUTES LES R√âSERVATIONS - AVEC PAGINATION
// -------------------------
router.get(
  "/all",
  authenticateToken,
  requireRole(["admin"]),
  async (req, res) => {
    try {
      // Param√®tres de pagination
      const page = parseInt(req.query.page) || 1;
      const limit = parseInt(req.query.limit) || 50;
      const skip = (page - 1) * limit;

      // Validation des param√®tres
      if (page < 1 || limit < 1 || limit > 100) {
        return res.status(400).json({
          result: false,
          error: "Param√®tres de pagination invalides (page >= 1, limit 1-100)"
        });
      }

      // Requ√™tes parall√®les pour performance
      const [bookings, totalCount] = await Promise.all([
        Booking.find({})
          .populate("userId", "firstname lastname email phone")
          .sort({ bookedAt: -1 })
          .skip(skip)
          .limit(limit)
          .lean(),
        Booking.countDocuments({})
      ]);

      // M√©tadonn√©es de pagination
      const totalPages = Math.ceil(totalCount / limit);
      const hasNextPage = page < totalPages;
      const hasPrevPage = page > 1;

      res.json({
        result: true,
        bookings,
        pagination: {
          currentPage: page,
          totalPages,
          totalItems: totalCount,
          itemsPerPage: limit,
          hasNextPage,
          hasPrevPage,
          nextPage: hasNextPage ? page + 1 : null,
          prevPage: hasPrevPage ? page - 1 : null
        }
      });
    } catch (err) {
      console.error("Erreur admin all bookings:", err);
      res.status(500).json({ result: false, error: "Erreur serveur" });
    }
  }
);

// -------------------------
// 6. ADMIN - LISTER TOUTES LES R√âSERVATIONS EN ATTENTE - AVEC PAGINATION
// -------------------------
router.get(
  "/admin/pending",
  authenticateToken,
  requireRole(["admin"]),
  async (req, res) => {
    try {
      // Param√®tres de pagination
      const page = parseInt(req.query.page) || 1;
      const limit = parseInt(req.query.limit) || 20; // Plus d'items par page pour admin
      const skip = (page - 1) * limit;

      // Validation des param√®tres
      if (page < 1 || limit < 1 || limit > 100) {
        return res.status(400).json({ 
          result: false, 
          error: "Param√®tres de pagination invalides (page >= 1, limit 1-100)" 
        });
      }

      // Requ√™tes parall√®les pour performance
      const [bookings, totalCount] = await Promise.all([
        Booking.find({ status: "pending" })
          .populate("userId", "firstname lastname email")
          .sort({ bookedAt: -1 })
          .skip(skip)
          .limit(limit)
          .lean(), // Performance: objet JS simple
        Booking.countDocuments({ status: "pending" })
      ]);

      // M√©tadonn√©es de pagination
      const totalPages = Math.ceil(totalCount / limit);
      const hasNextPage = page < totalPages;
      const hasPrevPage = page > 1;

      res.json({ 
        result: true, 
        bookings: bookings.map(booking => ({
          _id: booking._id,
          apartmentId: booking.apartmentId,
          startDate: booking.startDate,
          endDate: booking.endDate,
          price: booking.price,
          status: booking.status,
          bookedAt: booking.bookedAt,
          user: {
            firstname: booking.userId?.firstname,
            lastname: booking.userId?.lastname,
            email: booking.userId?.email
          }
        })),
        pagination: {
          currentPage: page,
          totalPages,
          totalItems: totalCount,
          itemsPerPage: limit,
          hasNextPage,
          hasPrevPage,
          nextPage: hasNextPage ? page + 1 : null,
          prevPage: hasPrevPage ? page - 1 : null
        }
      });
    } catch (err) {
      console.error("Erreur admin pending:", err);
      res.status(500).json({ result: false, error: "Erreur serveur" });
    }
  }
);

// -------------------------
// 6. ACTIONS PUBLIQUES VIA EMAIL - ROUTES S√âCURIS√âES
// -------------------------

// Route publique pour les actions via email (accept/refuse)
router.get(
  "/email-action/:token", 
  rateLimitConfig.public, // Protection rate limiting pour routes publiques
  async (req, res) => {
    try {
      const { token } = req.params;
      
      // Validation basique du token
      if (!token || token.length !== 64) {
        return res.status(400).send(`
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <title>Action Invalide - ImmoVA</title>
            <style>
              body { font-family: Arial, sans-serif; max-width: 600px; margin: 50px auto; padding: 20px; }
              .error { color: #d32f2f; background: #ffebee; padding: 20px; border-radius: 8px; }
            </style>
          </head>
          <body>
            <div class="error">
              <h2>‚ùå Action Invalide</h2>
              <p>Le lien utilis√© n'est pas valide. Veuillez v√©rifier le lien dans votre email.</p>
            </div>
          </body>
          </html>
        `);
      }

      // Ex√©cuter l'action via le service
      const result = await EmailActionService.executeTokenAction(token);
      
      if (!result.success) {
        return res.status(400).send(`
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <title>Action √âchou√©e - ImmoVA</title>
            <style>
              body { font-family: Arial, sans-serif; max-width: 600px; margin: 50px auto; padding: 20px; }
              .error { color: #d32f2f; background: #ffebee; padding: 20px; border-radius: 8px; }
            </style>
          </head>
          <body>
            <div class="error">
              <h2>‚ùå Action √âchou√©e</h2>
              <p><strong>Erreur:</strong> ${result.error}</p>
              ${result.code === 'ALREADY_PROCESSED' ? 
                '<p>Cette r√©servation a d√©j√† √©t√© trait√©e.</p>' : 
                '<p>Le lien a peut-√™tre expir√© ou est invalide.</p>'
              }
            </div>
          </body>
          </html>
        `);
      }

      // Succ√®s - Afficher page de confirmation
      const actionText = result.action === 'accept' ? 'accept√©e' : 'refus√©e';
      const actionColor = result.action === 'accept' ? '#4caf50' : '#ff9800';
      const actionIcon = result.action === 'accept' ? '‚úÖ' : '‚ùå';
      
      res.send(`
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <title>R√©servation ${actionText} - ImmoVA</title>
          <style>
            body { font-family: Arial, sans-serif; max-width: 600px; margin: 50px auto; padding: 20px; }
            .success { color: ${actionColor}; background: #f1f8e9; padding: 30px; border-radius: 8px; text-align: center; }
            .booking-details { background: #f5f5f5; padding: 20px; margin: 20px 0; border-radius: 8px; }
            .detail-row { margin: 10px 0; }
            .label { font-weight: bold; color: #333; }
            .value { color: #666; }
          </style>
        </head>
        <body>
          <div class="success">
            <h1>${actionIcon} R√©servation ${actionText}</h1>
            <p>L'action a √©t√© effectu√©e avec succ√®s !</p>
          </div>
          
          <div class="booking-details">
            <h3>üìã D√©tails de la r√©servation</h3>
            <div class="detail-row">
              <span class="label">Client:</span> 
              <span class="value">${result.booking.user.firstname} ${result.booking.user.lastname}</span>
            </div>
            <div class="detail-row">
              <span class="label">Email:</span> 
              <span class="value">${result.booking.user.email}</span>
            </div>
            <div class="detail-row">
              <span class="label">Logement:</span> 
              <span class="value">${result.booking.apartmentId}</span>
            </div>
            <div class="detail-row">
              <span class="label">P√©riode:</span> 
              <span class="value">Du ${formatDateUTC(result.booking.startDate)} au ${formatDateUTC(result.booking.endDate)}</span>
            </div>
            <div class="detail-row">
              <span class="label">Prix:</span> 
              <span class="value">${result.booking.price} ‚Ç¨</span>
            </div>
            <div class="detail-row">
              <span class="label">Statut:</span> 
              <span class="value" style="color: ${actionColor}; font-weight: bold;">
                ${result.booking.status === 'accepted' ? 'Accept√©e' : 'Refus√©e'}
              </span>
            </div>
          </div>
          
          <p style="text-align: center; color: #666; margin-top: 30px;">
            <small>Le client sera automatiquement notifi√© par email de cette d√©cision.</small>
          </p>
        </body>
        </html>
      `);

    } catch (error) {
      console.error("Erreur action email:", error);
      res.status(500).send(`
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <title>Erreur - ImmoVA</title>
          <style>
            body { font-family: Arial, sans-serif; max-width: 600px; margin: 50px auto; padding: 20px; }
            .error { color: #d32f2f; background: #ffebee; padding: 20px; border-radius: 8px; }
          </style>
        </head>
        <body>
          <div class="error">
            <h2>‚ö†Ô∏è Erreur Technique</h2>
            <p>Une erreur inattendue s'est produite. Veuillez r√©essayer plus tard ou contacter le support.</p>
          </div>
        </body>
        </html>
      `);
    }
  }
);

// -------------------------
// 7. PR√âVISUALISATION EMAIL (DEV SEULEMENT)
// -------------------------

// Route de test pour pr√©visualiser l'email
router.get(
  "/email-preview", 
  async (req, res) => {
    try {
      // Route accessible seulement en d√©veloppement
      if (process.env.NODE_ENV === 'production') {
        return res.status(404).json({ error: 'Route non disponible en production' });
      }

      // G√©n√©rer un aper√ßu avec des donn√©es de test
      const htmlPreview = await EmailService.generatePreview();
      
      // Retourner directement le HTML pour visualisation
      res.setHeader('Content-Type', 'text/html');
      res.send(htmlPreview);
      
    } catch (error) {
      console.error("Erreur g√©n√©ration pr√©visualisation:", error);
      res.status(500).json({ error: "Erreur g√©n√©ration pr√©visualisation" });
    }
  }
);

// -------------------------
// NOTE : ANCIEN SYST√àME EMAIL REMPLAC√â
// -------------------------
// L'ancienne fonction sendReservationEmail a √©t√© remplac√©e par
// EmailService.sendReservationEmail qui utilise le syst√®me de templates
// modulaire dans services/emailService.js et services/emailTemplateService.js

export default router;
